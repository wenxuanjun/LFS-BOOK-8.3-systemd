{"./":{"url":"./","title":"Linux From Scratch","keywords":"","body":"Linux From Scratch 在线阅读（做好一页就上传一页）：http://book.wendster.win 由于原版的比较丑陋，且在链接方面浪费了太多时间，所以，改用GitBook来“完成”（我也不知道能不能完成）这本书。 个人很喜欢LFS这个项目，所以闲着没事对照LCTT翻译的LFS 7.7 systemd（实在太旧了）翻译一下LFS 8.3 systemd，决定一个人完成，要是哪天能遇上志同道合的人一起翻译，想想真是完美呢！ 就当练练英语吧，并不打算什么时候翻译完，没准翻译完时8.3的LFS却已经过时了呢（笑）！ "},"prologue/foreword.html":{"url":"prologue/foreword.html","title":"前言","keywords":"","body":"前言 自 1998 年始，我对 Linux 从学习到深入了解已经有十多年。当安装好我的第一个 Linux 发行版后，我很快就为 Linux 所蕴含的整套理念及其背后的哲学思想所着迷。 做一件事总是有很多的方法。对于 Linux 发行版亦是如此。这么多年来已经有了许多发行版。一些仍然存活，另外一些已经变成其它样子，有些则已经只活在我们的记忆中。所有这些发行版均有不同的特点，以满足不同受众的需求。条条大路通罗马，我开始意识到自己可以不再必须受限于别人做好的发行版。在发现 Linux 之前，我们只能忍受各种操作系统的问题，因为我们别无选择。无论你爱还是不爱，它就在那里。而在 Linux 下，你才有了选择的可能。如果不喜欢某个东西，就可以自由地改变它，Linux 甚至鼓励你这样做。 我尝试过很多发行版，但是无法确定该用哪个。从某个角度来说，它们都是很不错的系统。这并不是说某个系统好或不好的问题，而是一个个人习惯问题。在各种可用选择中，显然没有哪个单一的系统于我而言最完美。于是我着手创建自己的 Linux 系统，以完全满足自己的喜好。 为了使其真正是我自己的系统，我毅然决定从源代码编译所有东西，而不是使用预编译好的二进制包。这个“完美”的 Linux 系统将具不同系统的优点，而没有它们与之俱来的不足。起初，这种想法相当让人畏惧，但我一直保持着可以构建出这样一个系统的信念。 在梳理了诸如循环依赖和编译错误之类的问题后，我最终构建出一个订制的 Linux 系统。它完全可以工作，并与当时已有的任何其它 Linux 系统一样完美可用。但它是我自己所创造的。能够亲手组装出这样一个系统让人很满意，而唯一一个能让人感觉更美妙的事是能够亲自创建软件的每个部分。 当我将自己的目标和经验与 Linux 社区的其它成员分享时，引发了大家对这些想法的不断关注。很快人们就清楚地意识到，这样一个定制的 Linux 系统不仅仅可以满足用户的特定需求，还可为程序员和系统管理员提供一个理想的学习机会，以增强他们（已有）的 Linux 技能。正是由于这种广泛的兴趣，Linux From Scratch Project 诞生了。 这本 Linux From Scratch 手册是该项目的重中之重。它为您提供了设计和构建自己的系统所需的背景知识和指令。本手册给出了一个样板，可以由此得到一个能正常工作的系统，但您可自由改变指令以适合自己的需求，从某种程度上说，这是本项目的一个重要组成部分。您仍然可以控制一切，我们只是在您开启自己的旅程时助您一臂之力。 我真诚地希望您在自己的 Linux From Scratch 系统上能度过一段美好的时光，并能享受拥有一个真正属于自己的系统的众多好处。 --Gerard Beekmansgerard@linuxfromscratch.org "},"prologue/audience.html":{"url":"prologue/audience.html","title":"致读者","keywords":"","body":"致读者 说到为什么要读这本书，我想，原因一定很多。有些人可能会提出这样的疑问： “都已经有现成的 Linux 系统可以下载和安装了，你为什么还要多此一举的从无到有创建一个呢？” 此项目存在的一个重要原因是帮助你了解 Linux 内部是如何工作的。通过构建 LFS 系统，你可以更好的理解 Linux 是如何正常运转，和其它程序之间是如何协同工作，以及和其它程序之间的依赖关系。最棒的是，这个学习经历能给你提供自定义 Linux 系统以满足你自己独特需求的能力。 另一个重要的原因是，你对系统本身有更多的控制权，而不必知道别人是如何实现的。在 LFS 下，你就是主宰，系统的各个方面都需要你亲力亲为。 LFS 可以让你创建极其精简的 Linux 系统。当安装那些常规的 Linux 系统，你往往迫不得已安装那些你用不到的（甚至你都不知道它们是干什么的）程序。这些程序也许会浪费你的硬件资源。你可能要说了，现在计算机的资源那么丰富，稍微浪费一些又有什么关系呢。但是你依旧要考虑到可引导 CD、USB 棒或者是一些嵌入式环境，它们对资源高度敏感，这恰恰是 LFS 所擅长的地方。 另一个优势是，自定义的 Linux 系统有更高的安全性。通过从源码构建一个完整的系统，你有权审核所有的代码和打入所需的安全补丁。这避免了花很长时间去等待别人编译修复了安全漏洞的二进制程序。而且，除非你检查了补丁文件且做了完整的验证，否则你又怎么能确信，新的二进制程序的的确确编译正确且解决了问题呢？ 从零构建一个基本可用的 Linux 系统是本书的目标，如果你并不打算这么做，那么，这本书可能对你来说用处并不大。 有太多的原因来支撑你从头构建属于自己的 LFS 系统了。最重要的原因，我想还是当你学会构建 LFS 后，就会发现你已经学会太多的相关信息和知识了。 "},"prologue/architecture.html":{"url":"prologue/architecture.html","title":"LFS 的目标架构","keywords":"","body":"LFS 的目标架构 LFS 当前主要支持 AMD/Intel 的 x86(32 位)和 x86_64(64 位) CPU。另外，本文档也涉及一些更改可以让 LFS 顺利地在 Power PC 和 ARM CPU 上运行。为了顺利构建 LFS，除了后面几页的内容外，你主要需要一个可以在当前 CPU 上正常运行的 Linux 系统，例如：早先版本的 LFS，Ubuntu/Fedora，SuSE 或者是在你的架构上可以运行的其它发行版。对了，32 位的发行版是可以在 64 位的 AMD/Intel 处理器上作为宿主机正常安装和运作的。 不过，64 位的一些实情是：和 32 位相比，运行的速度稍微的快那么一点点，但是相较而言，体积也稍微的大一点点。以在 Core 2 Duo 处理器上运行的 LFS-6.5 系统为例，以下是一些实际的数据： 架构 构建时间 构建后大小 32-bit 198.5 分钟 648 MB 64-bit 190.6 分钟 709 MB 正如你看到的，64 位程序仅仅比 32 位程序快了 4%，体积大了 9%。由此可见，单纯的追逐 64 位系统其实并没有太大的必要。但是，假如你的电脑的内存超过了 4G 又或者说需要操作大于 4G 的数据，64 位系统的优势就比较明显了。 以上讨论仅适用于比较相同硬件上的构建。现代64位系统比老的64位系统快得多，LFS作者建议在选择时构建在64位系统上。 假如按照本文的默认方式构建，那么你将得到一个“纯” 64 位系统————这意味着你仅能够执行 64 位的程序。构建 “multi-lib” 也并不是不可以，但是这意味着很多的程序都需要编译两次：一次编译为 32 位程序，一次编译为 64 位程序。不过，本文档并不涉及这部份的内容：这会干扰用户学习如何构建“最基本” Linux 系统。你可以通过阅读 Cross Linux From Scratch 的相关内容获得有关本话题的更多帮助。 "},"prologue/standards.html":{"url":"prologue/standards.html","title":"LFS 和标准","keywords":"","body":"LFS 和标准 LFS 的结构尽可能的遵循 Linux 的标准。主要的标准有： POSIX.1-2008. 文件系统层次标准 版本 3.0 草案 1 (FHS) Linux 标准基础（LSB）规格 LSB 有五个独立的标准：内核、C++、桌面、运行时语言和输出。除了普通的要求，还有架构特定要求。LFS 试图遵从前一节中所讨论的架构要求。 很多人不认同 LSB 的要求。定义它的主要目的是确保私有软件能够在兼容的系统上安装并正常运行。由于 LFS 是基于源代码的，用户对于需要什么软件包有完全的控制权，很多人选择不安装 LSB 规范所要求的软件包。 创建一个能够通过 LSB 认证测试的完整 LFS 系统是可行的，但需要很多 LFS 范围之外的额外软件包。在 BLFS 中有这些额外软件包的安装说明。 由 LFS 提供，用于满足 LSB 要求的软件包 类别 软件包 LSB 内核: Bash, Bc, Binutils, Coreutils, Diffutils, File, Findutils, Gawk, Grep, Gzip, M4, Man-DB, Ncurses, Procps, Psmisc, Sed, Shadow, Tar, Util-linux, Zlib LSB 桌面: 无 LSB 运行时语言: Perl LSB 显示: 无 LSB GTK3和LSB图形（试用）: 无 由BLFS提供，用于满足 LSB 要求的软件包 类别 软件包 LSB 内核: At, Batch (a part of At), Cpio, Ed, Fcrontab, Initd-tools, Lsb_release, NSPR, NSS, PAM, Pax, Sendmail (or Postfix or Exim), time LSB 桌面: Alsa, ATK, Cairo, Desktop-file-utils, Freetype, Fontconfig, Gdk-pixbuf, Glib2, GTK+2, Icon-naming-utils, Libjpeg-turbo, Libpng, Libtiff, Libxml2, MesaLib, Pango, Xdg-utils, Xorg LSB 运行时语言: Python, Libxml2, Libxslt LSB 显示: CUPS, Cups-filters, Ghostscript, SANE LSB GTK3和LSB图形（试用）: GTK+3 LFS 和 BLFS 没有提供，用于满足 LSB 要求的软件包 类别 软件包 LSB 内核: 无 LSB 桌面: Qt4（但Qt5是提供的） LSB 运行时语言: 无 LSB 显示: 无 LSB GTK3和LSB图形（试用）: 无 "},"prologue/package-choices.html":{"url":"prologue/package-choices.html","title":"本书中的软件包逻辑","keywords":"","body":"本书中的软件包逻辑 正如前文所述，LFS 的目标是构建一个完整可用的基本系统。该系统包含自复制所需的所有软件包，因此，用户可以从一个相对小的基础开始，依选择配置一个相对复杂的系统。所以，严格意义上说，LFS 并不是最小可用系统的代名词。甚至某些最重要的软件包都不一定必须安装。下面的列表介绍了本书中选择每个软件包的理由。 Acl 这个软件包包括了管理访问控制列表（ACL）的工具，用于定义文件和目录更细粒度的自主访问权。 Attr 这个软件包包括了管理文件系统的对象扩展属性的程序。 Autoconf 这个软件包包括了能根据开发者的模板自动生成配置源代码的 shell 脚本的程序。更新了构建过程之后重新构建软件包通常需要这个。 Automake 这个软件包包括了从模板生成 Make 文件的程序。更新了构建过程之后重新构建软件包通常需要这个。 Bash 这个软件包能满足提供到系统的 Bourne Shell 接口的 LSB 核心需求。由于其通用性和在基本 shell 功能上的扩展能力，所以选择它而不是其它的 shell 软件包。 Bc 这个软件包提供了一种任意精度的数值处理语言。在构建 Linux 内核时需要它。 Binutils 这个软件包包括了一个链接器、汇编器和其它处理对象文件的工具。编译 LFS 系统以及之上的大部分软件包需要这个软件包中的程序。 Bison 这个软件包中有 yacc(Yet Another Compiler Compiler) 的 GNU 版本，需要用来构建一些其它的 LFS 程序。 Bzip2 这个软件包包括了用来压缩和解压缩文件的程序。在解压缩很多 LFS 软件包的时候需要它。 Check 这个软件包包括了一个用于其它程序的测试工具。它只安装在临时工具链中。 Coreutils 这个软件包包括了一些查看和管理文件和目录的重要程序。在命令行里管理文件和每个 LFS 软件包的安装过程中需要它。 D-Bus 这个软件包包括了一个用于提供消息总线的程序，消息总线是一种应用程序之间通信的简单方式。systemd 也需要它。 DejaGNU 这个软件包包括了一个测试其它程序的框架。只安装在临时工具链中。 Diffutils 这个软件包包括了一些显示文件和目录差异的程序。这些程序可以用来创建补丁，也用于很多软件包的构建过程。 E2fsprogs 这个软件包包括了一些处理 ext2、ext3 和 ext4 文件系统的工具。这些是 Linux 上支持的最常用而且完全经过考验的文件系统。 Expat 这个软件包包括了一个相对小的 XML 解析库。Perl 模块 XML::Parser 需要用到这个。 Expect 这个软件包包括了一个生成与其它程序交互的脚本对话框的程序。通常用来测试其它软件包。只安装在临时工具链中。 File 这个软件包包括了一个能判断给定文件的类型的工具。一些软件包需要用它来构建。 Findutils 这个软件包包括了一些在文件系统中查找文件的程序。在很多软件包构建脚本中会用到它。 Flex 这个软件包包括了一个能生成识别文本模式程序的工具。是 lex(lexical analyzer) 程序的 GNU 版本。构建很多 LFS 软件包需要用到它。 Gawk 这个软件包包括了一些操作文本文件的程序。是 awk(Aho-Weinberg-Kernighan) 的 GNU 版本。在很多软件包的构建脚本中会用到它。 Gcc 这个软件包是 GNU 编译器工具集。它包括 C 和 C++ 的编译器以及其它一些不是由 LFS 构建的软件包。 GDBM 这个软件包包括了 GNU 数据库管理库。LFS 的另一个软件包 Man-DB 会用到它。 Gettext 这个软件包包括了很多软件包国际化和本地化需要用到的工具和库。 Glibc 这个软件包包括了主要的 C 语言库。缺少它 Linux 程序就运行不了。 GMP 这个软件包包括了能提供任意精度数值运算的数学库。编译 Gcc 会用到它。 Gperf 这个软件包包括了一个能从一个键集生成完美哈希函数的程序。sysetmd 会用到它。 Grep 这个软件包包括了一些在文件中搜索的程序。大部分软件包的构建脚本会用到它。 Groff 这个软件包包括了处理和格式化文本的程序。其中一个重要的功能是格式化 man 页面。 GRUB 这个包是 Grand Unified Boot Loader。是可用的引导加载器之一，但最灵活。 Gzip 这个包包括了一些压缩和解压缩文件的程序。解压很多 LFS 以及之上的软件包时会需要它。 Iana-etc 这个软件包提供了网络服务和协议的数据。启用合适的网络功能会用到它。 Inetutils 这个包包括了基本网络管理的程序。 Intltool 这个包包括了能从源文件中抽取可翻译字符串的工具。 IProute2 这个包包括了一些基本和高级的 IPv4 和 IPv6 网络的程序。由于其 IPv6 功能，所以选择它而不选择其它的常见网络工具包（net-tools）。 Kbd 这个包包括了一些键盘映射文件，用于非 US 键盘的键盘工具以及一些控制台字体。 Kmod 这个软件包包括了一些用于管理 Linux 内核模块的程序。 Less 这个软件包包括了一个很好的文本文件查看器，允许查看文件的时候向上或向下滚动。Man-DB 用它来查看 man 页面。 Libcap 这个包实现了可以用于 Linux 内核的，从用户空间到 POSIX 1003.1e 的接口。 Libelf ELFIFTILS项目为ELF文件和DWARF数据提供了库和工具。这个包中的大多数实用程序在其他包中可用，但是需要这个库（也是最有效的）来使用默认配置构建Linux内核。 Libffi 这个包实现了各种调用约定的可移植的高级编程接口。有些程序可能在编译时不知道要传递给函数的参数。例如，解释器可以在运行时被告知用于调用给定函数的参数的数量和类型。Libffi可用于这样的程序，以提供从解释器程序到编译代码的桥梁。 Libpipeline 这个包包括了一个以灵活和便捷的方式操作子进程流水线的库。Man-DB 软件包会用到它。 Libtool 这个软件包包括一些 GNU 通用库支持脚本。它降低了在一致、可移植的接口上使用共享库的复杂度。在其他 LFS 软件包的测试套件里需要它。 Linux Kernel 这个包就是操作系统。即我们常说的 “GNU/Linux” 中的 “Linux”。 M4 这个包包括了一个普通的文本宏处理器，作为其它程序的构建工具使用。 Make 这个包包括了一个指导软件包构建的程序。LFS 中的几乎每个包都需要它。 Man-DB 这个包包括了一些查找和查看 man 页面的程序。由于其更好的国际化功能，用来代替 man软件包。它提供了 man 程序。 Man-pages 这个包包括了基本的 Linux man 页面的真正内容。 MPC 这个包包括了复数运算的函数。Gcc 需要它。 MPFR 这个包包括了多精度运算的函数。Gcc 需要它。 Ninja 这个包包含一个关注速度的小型构建系统。它被设计成由一个更高级的构建系统生成它的输入文件，并尽可能快地运行构建。 Ncurses 这个包包括了一些处理字符界面的不依赖特定终端的库。通常用来为菜单系统提供光标控制。一些 LFS 的软件包会用到它。 Openssl 这个包提供了有关密码的管理工具和库。这对于向包括Linux内核在内的其他包提供加密功能非常有用。 Patch 这个包包括了一个通过补丁文件来修改或新建文件的程序，补丁文件通常是由 diff 程序创建的。一些 LFS 软件包的构建过程会需要它。 Perl 这个包包括了一个运行时语言 PERL 的解析器。一些 LFS 软件包的安装和测试套件会需要它。 Pkg-config 这个包提供了一个返回已安装库或软件包的元数据的程序。 Procps-NG 这个包包括了一些监视进程的程序。这些程序对系统管理非常有用，也用于 LFS 的启动脚本。 Psmisc 这个包包括了一些显示运行中进程信息的程序。这些程序对系统管理非常有用。 Python 3 这个包提供了一种解释性语言，它具有强调代码可读性的设计哲学。 Readline 这个包提供了一些命令行编辑和历史功能的库。Bash 会使用它。 Sed 这个包提供了不通过文本编辑器而直接编辑文本的功能。大部分 LFS 软件包的配置脚本需要它。 Shadow 这个包包括了一些以安全方式处理密码的程序。 Systemd 作为 Sysvinit 的替代品，这个包提供了一个 init 程序以及一些其它的引导和系统控制功能。很多 Linux 发行版都用它。 Tar 这个软件包提供了归档和提取 LFS 中的几乎所有软件包的能力。 Tcl 这个包包括了在很多 LFS 软件包测试套件中使用的工具命令语言。只安装在临时工具链中。 Texinfo 这个包包括了一些读、写以及转换信息页面的程序。在很多 LFS 软件包的安装过程中会使用它。 Util-linux 该软件包包括了许多工具。其中有处理文件系统、控制台、分区和消息的工具。 Vim 这个包包括了一个编辑器。由于 vi 编辑器的经典以及大量的强大功能而选择它。对很多用户来说一个编辑器是一个非常个人的选择，如果需要的话也可以选择其它编辑器。 XML::Parser 这个包是和 Expat 交互的 Perl 模块。 XZ Utils 这个包包括了一些压缩和解压缩文件的程序。通常它的压缩率最高，在解压 XZ 或者 LZMA 格式的软件包时非常有用。 Zlib 这个包包括了一些程序所使用的压缩和解压缩功能。 "},"prologue/prerequisites.html":{"url":"prologue/prerequisites.html","title":"前置需求","keywords":"","body":"前置需求 构建一个 LFS 系统并不是一个简单的任务。它要求对 Unix 系统管理有一定水平的了解，以便可以解决问题并正确地执行所列出的命令。特别是，最起码你应该有使用命令行 (shell)复制或移动文件和目录、列出目录和文件内容、切换当前目录的能力。同时也希望你有使用和安装 Linux 软件的基本知识。 因为 LFS 书中假设你至少有这些基本技能，所以众多的 LFS 支持论坛看起来在这方面给你提供不了太多帮助。你会发现对于这些基本知识的问题并不会得到解答，或者会简单的建议你去看一下 LFS 主要的提前阅读列表。 构建 LFS 系统之前，我们建议阅读以下的 HOWTO： 编译软件 HOWTO http://www.tldp.org/HOWTO/Software-Building-HOWTO.html 这是一个在 Linux 上编译和安装“通用” Unix 软件包的综合指南。尽管成文有一段时间了，但它提供了一个编译和安装软件所需基本技能的不错的总结。 Linux 用户指南 http://tldp.org/pub/Linux/docs/ldp-archived/users-guide/ 该指南涵盖的各类 Linux 软件的使用。这个指南也挺旧了，但是仍然有效。 "},"prologue/typography.html":{"url":"prologue/typography.html","title":"排版约定","keywords":"","body":"排版约定 为了能更轻松地阅读，这里有一些全书使用的排版约定。这个部分包括一些来自 Linux From Scratch 中的排版格式例子。 ./configure --prefix=/usr 这种形式的文本被设计成完全按照看到的样子输入，除非在周围文本中另有说明。它也用在解释部分，用以指出引用的是哪个命令。 某些情况下，一个逻辑行会通过在行末添加反斜杠被折叠为两个或者更多的物理行。 CC=\"gcc -B/usr/bin/\" ../binutils-2.18/configure \\ --prefix=/tools --disable-nls --disable-werror 注意，反斜杠后面必须紧跟一个回车符。其它空格字符，例如空格和tab键会导致错误结果。 install-info: unknown option '--dir-file=/mnt/lfs/usr/info/dir' 这种形式的文本（定宽文本）显示屏幕输出，通常是所运行命令的输出结果。 这种形式也用来显示文件名，例如: /etc/ld.so.conf 强调 这种形式的文本在本书中有多重目的。主要目的是强调重要的内容或项目。 http://www.linuxfromscratch.org/ 这种格式用来表示 LFS 社区内部及外部网页的超链接。包括 HOWTO，下载地址和网站等。 cat > $LFS/etc/group 这种格式在创建配置文件中会使用。第一个命令告诉系统新建一个文件 $LFS/etc/group，不论在后面的行中输入了什么，直到遇到文件终结符（EOF）。因此，这整个部分正如看到的那样输入。 这种格式用来封装需要替换为合适内容的文本，以及复制粘贴操作。 [可选的文本] 这种格式用来封装可选项文本。 passwd(5) 这种格式用来表示特定的手册 (man) 页面。括号内的数字表示该手册的特定部分。例如 passwd 有两个手册页面。在 LFS 安装说明中，这两个手册页面会表示为 /usr/share/man/man1/passwd.1 以及 /usr/share/man/man5/passwd.5。当书中使用 passwd(5) 时它特指 /usr/share/man/man5/passwd.5。man passwd 会输出它找到匹配 “passwd” 的第一个手册页面，也就是 /usr/share/man/man1/passwd.1。在这个例子中，你需要执行 man 5 passwd 才能阅读指定的手册页面。应该注意的是，大部分的手册页面在不同部分不会有重复的页面名字。因此，man \"program name\"通常就足够了。 "},"prologue/organization.html":{"url":"prologue/organization.html","title":"本书结构","keywords":"","body":"本书结构 本书分为以下几个部分。 第一部分 介绍 第一部分 解释了一些安装 LFS 时的重要注意事项。同时还提供了本书的基本信息。 第二部分 构建的准备工作 第二部分 描述了构建的一些准备工作，包括分区，下载软件包，编译一些临时工具。 第三部分 构建 LFS 系统 第三部分 引导用户开始 LFS 系统的构建——逐一的编译和安装所有的软件包，设置启动脚本，安装内核。生成的 Linux 系统是继续编译其它一系列软件的基础，通过那些软件来扩展系统，系统才能更好地满足我们的需求。在本书的最后，我们还给出了一个便于使用的引用列表，包括安装好的程序、库和一些重要文件。 "},"prologue/errata.html":{"url":"prologue/errata.html","title":"勘误表","keywords":"","body":"勘误表 构建 LFS 系统的软件是在不断的更新和改进的，也许在这本 LFS 书发布以后就会出现一些安全警告或者是修复了一些 bug。请在着手构建之前访问 http://www.linuxfromscratch.org/lfs/errata/8.3-systemd/ ，检查此版本 LFS 软件包的版本或说明，是否需要修改以解决安全漏洞或其它 bug。您应该关注本书的一切变化，且将其应用到 LFS 系统的构建中去。 "},"chapter01/how.html":{"url":"chapter01/how.html","title":"1.1 如何构建 LFS 系统","keywords":"","body":"1.1 如何构建 LFS 系统 LFS 系统需要在一个已经安装好的 Linux 发行版（比如 Debian、OpenMandriva、Fedora 或 OpenSUSE）中构建。这个已有的 Linux 系统（即宿主）作为构建新系统的起始点，提供了必要的程序，包括一个编译器、链接器和 shell。请在安装发行版的过程中选择 “development（开发）”选项以便使用这些开发工具。 除了将一个独立发行版安装到你的电脑上之外，你也可以使用商业发行版的 LiveCD。 本书的第二章描述了如何创建一个的新 Linux 本地分区和文件系统，这就是编译和安装新的 LFS 系统的地方。第三章介绍了构建 LFS 系统所需下载的软件包和补丁，以及如何把它们保存在新的文件系统里。 第四章讨论了如何设置恰当的工作环境。因为它阐述了几个需要注意的重要问题，在你按照第五章及之后的内容开始工作前，请仔细阅读第四章。 第五章阐述了构成基本开发套件（即工具链）的大量软件包的安装，在第六章中将用这个开发套件构建真正的系统。其中一些包是需要解决循环依赖——比如，你需要一个编译器来编译一个编译器。 第五章还将向你展示如何构建第一遍的工具链，包括 Binutils 和 GCC （第一遍基本上就是重新安装这两个核心软件包）。下一步是构建 Glibc，即 C 语言库。Glibc 将用第一遍构建的工具链编译。然后，第二遍的工具链就被编译好了。这次，工具链将被动态链接到新建成的 Glibc。 第五章中剩余的包将用这个第二遍的工具链编译。当这些工作完成以后，LFS 的安装过程就不会再依赖于宿主发行版了，除了正在运行的内核。 把新系统从宿主发行版中分离出来的工作看起来可能有点多余。5.2 “工具链技术备注”这一节给出了为什么要这么做的完整技术说明。 在第六章，会构建完整的 LFS 系统。我们将使用 chroot (change root 改变根目录) 程序来进入一个虚拟环境并启动一个新的 shell，这个 shell 的根目录将被指向到 LFS 分区。这个过程非常像是重启并让内核把 LFS 分区挂载为根分区。系统并没有真正的重启，而是在使用 chroot 实现的，因为创建一个可启动的系统还需要有一些目前尚未完成的额外工作。 使用 “chroot” 的最大好处是，它在运行过程中允许你在构建 LFS 的同时继续使用宿主系统。在等待包的编译过程中，你可以继续正常使用你的电脑。 为了完成安装，还需要第七章中的基本的系统配置方法， 第八章中的内核和启动引导程序的配置方法。 第九章包含了学完本书以后继续使用 LFS 的一些建议。在本书内的步骤完成之后，电脑就可以重启进入新的 LFS 系统了。 流程大概就是这样。每一步的详细信息都会在之后的章节和软件包的描述里讨论。当你踏上这段 LFS 之旅，就会理清这些看起来很复杂的东西，每一个都将对号入座。 "},"chapter01/whatsnew.html":{"url":"chapter01/whatsnew.html","title":"1.2 上次发布以来的更新","keywords":"","body":"1.2 上次发布以来的更新 下面列出了自本书上一次发布之后的一些软件包更新。 更新： Acl-2.2.53 Attr-2.4.48 Automake-1.16.1 Binutils-2.31.1 Bison-3.0.5 Coreutils-8.30 D-Bus-1.12.10 E2fsprogs-1.44.3 Expat-2.2.6 File-5.34 Gawk-4.2.1 GCC-8.2.0 GDBM-1.17 Glibc-2.28 IPRoute2-4.18.0 Libelf-0.173 Linux-4.18.5 Man-DB-2.8.4 Man-pages-4.16 Meson-0.47.1 Openssl-1.1.0i Perl-5.28.0 Procps-ng-3.3.15 Python-3.7.0 Sed-4.5 Shadow-4.6 Systemd-239 Tzdata-2018e Util-Linux-2.32.1 Vim-8.1 XZ-Utils-5.2.4 "},"chapter01/changelog.html":{"url":"chapter01/changelog.html","title":"1.3 更新日志","keywords":"","body":"1.3 更新日志 这是 Linux From Scratch 手册的 8.3-systemd 版本，发布于2018年9月1日。如果距离这个时间已超过 6 个月，那么应该已经有更新和更好的版本了。要获取的话，请访问这个页面 http://www.linuxfromscratch.org/mirrors.html 里任意一个镜像站点。 下面是本书上一次发布之后的更新列表。 更新日志条目： 2018-09-01 [bdubbs] - LFS-8.3 发布. [bdubbs] - 更新到 linux-4.18.5。 解决了 #4337. 2018-08-25 [bdubbs] - 禁用GCC中弃用的MPX代码。 2018-08-16 [bdubbs] - 更新到 expat-2.2.6。 解决了 #4334. [bdubbs] - 更新到 openssl-1.1.0i。 解决了 #4335. [bdubbs] - 更新到 iproute2-4.18.0。 解决了 #4333. [bdubbs] - 更新到 linux-4.18.1。 解决了 #4336. 2018-08-12 [bdubbs] - 更新到 linux-4.18。 解决了 #4332. 2018-08-12 [bdubbs] - 更新到 dbus-1.12.10。 解决了 #4328. [bdubbs] - 使用libidn2给glibc添加注释。 [bdubbs] - 在VIM测试指令中添加LANG。 [bdubbs] - 确保grep测试完成。 [bdubbs] - 在无特权用户下运行第6章中GCC测试。 [bdubbs] - 将shadow移动到GCC之前，因此GCC测试可以使用SU作为无特权用户运行. [bdubbs] - 为确保没有使用宿主系统库，在第5章中添加Perl配置选项。 [bdubbs] - 更新glibc-2.28所需的make的最小版本到4.0版本。 [bdubbs] - 更新bzip2的链接到一个新地址。 解决了 #4331. [bdubbs] - 更新到 linux-4.17.14。 解决了 #4330. 2018-08-08 [renodr] - 更新到 linux-4.17.13。 解决了 #4327. 2018-08-03 [renodr] - 为systemd添一个补丁来修复在glibc-2.28下编译错误的问题。 2018-08-02 [bdubbs] - 更新到 glibc-2.28。 解决了 #4326. [bdubbs] - 更新到 gdbm-1.17。 解决了 #4325. [bdubbs] - 更新到 linux-4.17.11。 解决了 #4322. [bdubbs] - 更新到 man-db-2.8.4。 解决了 #4321. 2018-07-26 [bdubbs] - 更新镜像和翻译信息。 解决了 #4318. [bdubbs] - 更新到 gcc-8.2.0。 解决了 #4320. [bdubbs] - 更新到 file-5.34。 解决了 #4319. [bdubbs] - 更新到 linux-4.17.10。 解决了 #4316. 2018-07-23 [renodr] - 更新到 systemd-239。 解决了 #4298. 2018-07-18 [bdubbs] - 更新到 util-linux 2.32.1。 解决了 #4315. [bdubbs] - 更新到 binutils-2.31.1。 解决了 #4314. [bdubbs] - 更新到 meson-0.47.1。 解决了 #4313. [bdubbs] - 记录一些新的回归测试失败。 [bdubbs] - 更新到 linux-4.17.8。 解决了 #4312。 [bdubbs] - 更新到 e2fsprogs-1.44.3。 解决了 #4310. 2018-07-08 [bdubbs] - 修复Texinfo回归测试中的失败。 [bdubbs] - 更新到 linux-4.17.5。 解决了 #4300. [bdubbs] - 更新到 meson-0.47.0。 解决了 #4306. 2018-07-07 [bdubbs] - 向libffi添加配置选项以确保正确的体系结构选择。 解决了 #4303. 2018-07-06 [bdubbs] - 使第6章开头部分的符号链接与本书的所有版本一致，允许删除e2fsprog中不再需要的环境变量。 [bdubbs] - 更新到 Python-3.7.0。 解决了 #4301. [bdubbs] - 更新到 gdbm-1.16。 解决了 #4302. [bdubbs] - 更新到 elfutils-0.173。 解决了 #4304. [bdubbs] - 更新到 coreutils-8.30。 解决了 #4305. 2018-07-03 [bdubbs] - 更新到 attr-2.4.48。 解决了 #4308. [bdubbs] - 更新到 acl-2.2.53。 解决了 #4307. 2018-06-25 [bdubbs] - 各种URL更新。 解决了 #4293 and #4294. [bdubbs] - 更新到 perl-5.28.0。 解决了 #4299. [bdubbs] - 更新到 Sysvinit 2.90。 解决了 #4297. [bdubbs] - 更新到 gdbm-1.15。 解决了 #4296. [bdubbs] - 更新到 elfutils-0.172。 解决了 #4292. [bdubbs] - 更新到 linux-4.17.2。 解决了 #4295. 2018-06-12 [bdubbs] - XZ页面中的键入修复。 解决了 #4285. [bdubbs] - 在GCC中更改一些HTTP引用到HTTPS。 解决了 #4281. [bdubbs] - 更新到 iproute2-4.17.0。 解决了 #4288. [bdubbs] - 更新到 bison-3.0.5。 解决了 #4284. [bdubbs] - 更新到 linux-4.17.1。 解决了 #4280. 2018-05-22 [bdubbs] - 更新一些链接到HTTPS。 解决了 #4274. [bdubbs] - 更新到 procps-ng-3.3.15。 解决了 #4279. [bdubbs] - 更新到 vim-8,1。 解决了 #4278. [bdubbs] - 更新到 meson-0.46.1。 解决了 #4277. [bdubbs] - 更新到 e2fsprogs-1.44.2。 解决了 #4275. [bdubbs] - 更新到 linux-4.16.10。 解决了 #4276. 2018-05-11 [bdubbs] - 更新到 linux-4.16.8。 解决了 #4267. 2018-05-07 [bdubbs] - 在第6章中更改退出操作以不需要注销。 2018-05-05 [bdubbs] - 更新到 gcc-8.1.0。 解决了 #4268. [bdubbs] - 更新到 linux-4.16.7。 解决了 #4262. [bdubbs] - 更新到 man-pages-4.16。 解决了 #4266. [bdubbs] - 更新到 meson-0.46.0。 解决了 #4263. [bdubbs] - 更新到 shadow-4.6。 解决了 #4264. [bdubbs] - 更新到 tzdata-2018e。 解决了 #4269. [bdubbs] - 更新到 xz-5.2.4。 解决了 #4265. 2018-04-20 [bdubbs] - 更新到 linux-4.16.2。 解决了 #4258. [bdubbs] - 更新到 file-5.33。 解决了 #4261. [bdubbs] - 更新到 perl-5.26.2。 解决了 #4260. 2018-04-16 [bdubbs] - 修复meson的man页面和描述。 感谢 Xi Ruoyao 提供的补丁. 2018-04-11 [bdubbs] - 修复gettext中的appdata.loc文件. [bdubbs] - 更新到 linux-4.16.1。 解决了 #4256. [bdubbs] - 更新到 procps-ng-3.3.14。 解决了 #4257. 2018-04-06 [bdubbs] - 把libelf添加到rationale。 解决了 #4252. [bdubbs] - 更新到 man-db-2.8.3。 解决了 #4255. [bdubbs] - 更新到 iproute2-4.16.0。 解决了 #4254. [bdubbs] - 更新到 linux-4.16。 解决了 #4250. [bdubbs] - 更新到 procps-ng-3.3.13。 解决了 #4253. [bdubbs] - 更新到 sed-4.5。 解决了 #4251. 2018-03-23 [bdubbs] - 更新一些链接HTTPS。 感谢 avmaisak 提供的补丁。 解决了 #4247. [bdubbs] - 更新到 Python3-3.6.5。 解决了 #4248. [bdubbs] - 更新到 openssl-1.1.0h。 解决了 #4244. [bdubbs] - 更新到 e2fsprogs-1.44.1。 解决了 #4244. [bdubbs] - 更新到 tzdata-2018d。 解决了 #4243. [bdubbs] - 更新到 meson-0.45.1。 解决了 #4242. [bdubbs] - 更新到 linux-4.15.14。 解决了 #4241. 2018-03-23 [bdubbs] - 删除在第9章中引用BLFS中的OpenSSL。 解决了 #4240. [bdubbs] - 更新最小主机系统要求。 解决了 #4239. [bdubbs] - 增加了OpenSSL的描述。 解决了 #4234. [bdubbs] - 更新到 util-linux-2.32。 解决了 #4219. [bdubbs] - 更新到 meson-0.45.0。 解决了 #4232. [bdubbs] - 更新到 e2fsprogs-1.44.0。 解决了 #4236. [bdubbs] - 更新到 linux-4.15.11。 解决了 #4237. [bdubbs] - 更新到 automake-1.16.1。 解决了 #4238. [bdubbs] - 更新到 systemd-238。 解决了 #4233. 2018-03-03 [bdubbs] - 更新到 dbus-1.12.6。 解决了 #4231. [bdubbs] - 更新到 man-db-2.8.2。 解决了 #4230. [bdubbs] - 更新到 gawk-4.2.1。 解决了 #4227. [bdubbs] - 更新到 meson-0.44.1。 解决了 #4226. [bdubbs] - 更新到 meson-0.44.1。 解决了 #4222. [bdubbs] - 更新到 linux-4.15.7。 解决了 #4221. 2018-03-02 [bdubbs] - LFS-8.2 发布. "},"chapter01/resources.html":{"url":"chapter01/resources.html","title":"1.4 资源","keywords":"","body":"1.4 资源 1.4.1. FAQ 如果在构建 LFS 系统的过程中遇到任何错误，有任何的疑问，或者认为书中存在拼写错误，请先看一下常见问题列表（FAQ） http://www.linuxfromscratch.org/faq/。 1.4.2. 邮件列表 在服务器 linuxfromscratch.org 上部署了一些用于 LFS 项目开发工作的邮件列表。其中包括了主要开发列表和支持列表，以及一些其它的。如果通过 FAQ 不能解决你遇到的问题，接下来你可以搜索邮件列表： http://www.linuxfromscratch.org/search.html。 对于不同列表中的信息，如何订阅，归档，以及额外信息，请访问 http://www.linuxfromscratch.org/mail.html。 1.4.3. IRC频道 有些 LFS 社区的成员会在 IRC 上提供帮助。在使用这种方式之前，请保证你的问题并没有已经在 LFS FAQ 或邮件列表中被回答过了。你可以在 irc.freenode.net 找到这个 IRC 网络。支持频道名字是 #LFS-support。 1.4.4. 镜像站点 LFS 项目在世界范围内有许多镜像站点，方便大家访问我们的网站以及下载所需文件。请访问 LFS 站点 http://www.linuxfromscratch.org/mirrors.html 查看最新的镜像站点列表。 1.4.5. 联系方式 请直接通过某个 LFS 邮件列表（上面已经列出）提出你的问题和评论。 "},"chapter01/askforhelp.html":{"url":"chapter01/askforhelp.html","title":"1.5 帮助","keywords":"","body":"1.5 帮助 如果在使用本书的过程中有疑问或碰到问题，可以先去看下 FAQ 页面 http://www.linuxfromscratch.org/faq/#generalfaq。 那里已经解决了很多经常遇到的问题。如果你的问题在那里找不到答案，可以先尝试找出问题的原因。下面页面里的提示可以提供一些帮你定位问题的帮助：http://www.linuxfromscratch.org/hints/downloads/files/errors.txt。 如果在 FAQ 里找不到你遇到的问题，还可以在这个邮件列表里搜索一下：http://www.linuxfromscratch.org/search.html。 我们还有一个很棒的 LFS 社区，大家都很乐意通过邮件列表和 IRC 提供协助（参看本书章节 “1.4 资源”）。不过，我们每天收到的支持问题中有很多其实可以通过查看 FAQ 和搜索邮件列表轻松解决。所以，为了让我们能最大可能地提供更好的协助，希望你碰到问题能自己先研究一下。这样可以让我们有精力去关注更罕见的支持需求。如果你自己搜索不到解决方式，请在你的帮助请求里收集所有相关信息（下面提到的）。 1.5.1. 需要提供的信息 除了对你遇到的问题的一个简短描述外，任何帮助请求里都需要包含的一些关键信息： 所用手册的版本（本手册是 8.3-systemd） 用来构建 LFS 的宿主机器的 Linux 发行版以及版本 本书章节 vii 所需宿主系统中的脚本打印信息 出现问题的软件包或本书的章节 精确的错误信息或表现形式 注明你是否已经脱离了本书的内容 脱离本书内容并不是说我们就一定不会帮你。毕竟，LFS 还是属于个人爱好。坦率地告知对已验证流程的任何改动，有助于我们评估和找到你问题的可能原因。 1.5.2. 配置脚本问题 如果在运行 configure 脚本时遇到问题，查看一下 config.log 文件。这个文件中会包含 configure 脚本运行时发生的没有输出到屏幕上的错误信息。如果你需要寻求帮助的话请包含相关行。 1.5.3. 编译问题 屏幕上的显示输出和各个文件的内容都有助于定位编译发生问题的原因。configure 脚本和 make 执行时的屏幕打印输出都有用。并不需要包含整个所有输出信息，但是一定要包含足够的相关信息。下面的例子是 make 出错后需要包含的屏幕显示的输出信息： gcc -DALIASPATH=\\\"/mnt/lfs/usr/share/locale:.\\\" -DLOCALEDIR=\\\"/mnt/lfs/usr/share/locale\\\" -DLIBDIR=\\\"/mnt/lfs/usr/lib\\\" -DINCLUDEDIR=\\\"/mnt/lfs/usr/include\\\" -DHAVE_CONFIG_H -I. -I. -g -O2 -c getopt1.c gcc -g -O2 -static -o make ar.o arscan.o commands.o dir.o expand.o file.o function.o getopt.o implicit.o job.o main.o misc.o read.o remake.o rule.o signame.o variable.o vpath.o default.o remote-stub.o version.o opt1.o -lutil job.o: In function `load_too_high': /lfs/tmp/make-3.79.1/job.c:1565: undefined reference to `getloadavg' collect2: ld returned 1 exit status make[2]: *** [make] Error 1 make[2]: Leaving directory `/lfs/tmp/make-3.79.1' make[1]: *** [all-recursive] Error 1 make[1]: Leaving directory `/lfs/tmp/make-3.79.1' make: *** [all-recursive-am] Error 2 在这个例子里，很多人可能只包含了最后的部分： make [2]: *** [make] Error 1 这并没有提供足够的信息来诊断问题，因为它只能说明出问题了，而没有指出哪儿出了问题。需要保留完整的打印信息，像上面例子中的，是因为它包含了所执行的命令以及相应的错误信息。 这个链接 http://catb.org/~esr/faqs/smart-questions.html是一篇关于如何在互联网上寻求帮助的很好的文章。去看一下并遵循文章中给出的提示，可以增加你能得到所想要的帮助的可能性。 "},"chapter02/introduction.html":{"url":"chapter02/introduction.html","title":"2.1 介绍","keywords":"","body":"2.1. 介绍 在本章中，我们将会准备用于安装 LFS 的分区。包括建立分区、为分区设置文件系统，挂载分区。 "},"chapter02/hostreqs.html":{"url":"chapter02/hostreqs.html","title":"2.2 宿主机需求","keywords":"","body":"2.2 宿主机需求 以下是您的主机系统应安装有的软件和它们的最小版本，对于大多数现代Linux发行版来说，这不应该是一个问题。还要注意，许多发行版将软件头放入单独的包中，通常以“-devel”或“-dev”的形式。如果你的发行提供了它们，一定要安装它们。 下面软件的旧版本可能可以工作，但是没有经过测试。 Bash-3.2 (/bin/sh应该被链接到bash) Binutils-2.25 (不推荐版本大于2.31.1，因为它们没有被测试过。) Bison-2.7 (/usr/bin/yacc应该是bison或执行bison的小脚本的链接) Bzip2-1.0.4 Coreutils-6.9 Diffutils-2.8.1 Findutils-4.2.31 Gawk-4.0.1 (/usr/bin/awk应该链接到gawk) GCC-4.9 包括C++编译器,g++(不推荐大于8.2.0的版本，因为它们没有被测试过) Glibc-2.11 (不推荐大于2.28的版本，因为它们没有被测试过） Grep-2.5.1a Gzip-1.3.12 Linux Kernel-3.2 我们在第6章中根据开发人员的建议构建glibc时指定了该内核版本，这就是内核版本不能过低的原因，此外，udev也需要它。 如果主机内核低于3.2，则需要用更新的版本来替换它。有两种方法可以解决这个问题：首先，看看Linux供应商是否提供了一个3.2或更高版本的内核包。如果是，安装它。如果您的供应商没有提供可接受的内核包，或者您不希望安装它，那么您可以自己编译内核。编译内核和配置引导加载器的指令（假设主机使用GRUB）位于第8章。 **M4-1.4.10 Make-4.0 Patch-2.5.4 Perl-5.8.8 Sed-4.1.5 Tar-1.22 Texinfo-4.7 Xz-5.0.0 请注意，使用本书中包含的指令来构建LFS系统需要上面提到的符号链接，若它们指向其他软件（如dash、mawk等），也许可以工作，但是LFS开发团队没有测试或支持，并且可能需要偏离指令或对某些包进行额外的补丁。 要查看主机系统所有的包都是适当的版本，以及拥有编译程序的能力，请运行以下内容： cat > version-check.sh $MYSH\" echo $MYSH | grep -q bash || echo \"ERROR: /bin/sh does not point to bash\" unset MYSH echo -n \"Binutils: \"; ld --version | head -n1 | cut -d\" \" -f3- bison --version | head -n1 if [ -h /usr/bin/yacc ]; then echo \"/usr/bin/yacc -> `readlink -f /usr/bin/yacc`\"; elif [ -x /usr/bin/yacc ]; then echo yacc is `/usr/bin/yacc --version | head -n1` else echo \"yacc not found\" fi bzip2 --version 2>&1 `readlink -f /usr/bin/awk`\"; elif [ -x /usr/bin/awk ]; then echo awk is `/usr/bin/awk --version | head -n1` else echo \"awk not found\" fi gcc --version | head -n1 g++ --version | head -n1 ldd --version | head -n1 | cut -d\" \" -f2- # glibc version grep --version | head -n1 gzip --version | head -n1 cat /proc/version m4 --version | head -n1 make --version | head -n1 patch --version | head -n1 echo Perl `perl -V:version` sed --version | head -n1 tar --version | head -n1 makeinfo --version | head -n1 xz --version | head -n1 echo 'int main(){}' > dummy.c && g++ -o dummy dummy.c if [ -x dummy ] then echo \"g++ compilation OK\"; else echo \"g++ compilation failed\"; fi rm -f dummy.c dummy EOF bash version-check.sh "},"chapter02/stages.html":{"url":"chapter02/stages.html","title":"2.3 分阶段构造 LFS","keywords":"","body":"2.3 分阶段构造 LFS "},"chapter02/creatingpartition.html":{"url":"chapter02/creatingpartition.html","title":"2.4 创建新分区","keywords":"","body":"2.4 创建新分区 "},"chapter02/creatingfilesystem.html":{"url":"chapter02/creatingfilesystem.html","title":"2.5 在分区上创建文件系统","keywords":"","body":"2.5 在分区上创建文件系统 "},"chapter02/aboutlfs.html":{"url":"chapter02/aboutlfs.html","title":"2.6 设置 $LFS 变量","keywords":"","body":"2.6 设置 $LFS 变量 "},"chapter02/mounting.html":{"url":"chapter02/mounting.html","title":"2.7 挂载新分区","keywords":"","body":"2.7 挂载新分区 "}}